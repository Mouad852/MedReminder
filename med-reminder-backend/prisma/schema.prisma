generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  CONSULTATION
  CHECKUP
  FOLLOW_UP
}

enum MedicationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MedicationForm {
  PILL
  SYRUP
  INJECTION
  CAPSULE
  DROPS
  INHALER
  OTHER
}

enum MedicationInstruction {
  AFTER_MEAL
  BEFORE_MEAL
  MORNING_EMPTY_STOMACH
  BEDTIME
  NONE
}

model Medication {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  userId       String                @db.ObjectId
  user         User                  @relation(fields: [userId], references: [id])

  name         String
  dosage       Int
  dosageUnit   String    @default("mg")
  frequency    String    @default("daily")
  form         MedicationForm        @default(PILL)
  timesPerDay  Int
  times        String[]

  startDate    DateTime
  endDate         DateTime?
  reminderMethod  String?               // optional: "app", "sms", "email"
  enableReminders Boolean?              @default(true)
  notes        String?
  status       MedicationStatus      @default(ACTIVE)
  instruction  MedicationInstruction @default(NONE)

  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  role           UserRole      @default(PATIENT)
  email          String        @unique
  password       String
  phone          String?
  gender         String?
  birthDate      DateTime?
  address        String?       
  city           String       
  country        String?       
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isDeleted      Boolean       @default(false)

  // Relations
  appointments   Appointment[]
  medications    Medication[]
  notifications  Notification[]
  doctor         Doctor?
}

model Notification {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String                @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String   // 'APPOINTMENT' or 'MEDICATION'
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  sendAt    DateTime // when the notification should be triggered
}



model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String            @db.ObjectId
  user      User              @relation(fields: [userId], references: [id])
  doctorId  String?           @db.ObjectId
  doctor    Doctor?           @relation(fields: [doctorId], references: [id])
  doctorName String?
  location  String?
  date      DateTime
  time      String
  type      AppointmentType
  status    AppointmentStatus @default(BOOKED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Availability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String   @db.ObjectId
  doctor    Doctor   @relation(fields: [doctorId], references: [id])

  date      DateTime // Specific day
  startTime String   // Example: "09:00"
  endTime   String   // Example: "12:00"
  isBooked  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @unique @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  specialty    String
  location     String
  phone        String
  bio          String?
  experience   Int?
  appointments Appointment[]
  availabilities Availability[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}



