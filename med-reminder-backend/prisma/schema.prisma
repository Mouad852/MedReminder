generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  CONSULTATION
  CHECKUP
  FOLLOW_UP
}

enum MedicationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MedicationForm {
  PILL
  SYRUP
  INJECTION
  CAPSULE
  DROPS
  INHALER
  OTHER
}

enum MedicationInstruction {
  AFTER_MEAL
  BEFORE_MEAL
  MORNING_EMPTY_STOMACH
  BEDTIME
  NONE
}

model Medication {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  userId       String                @db.ObjectId
  user         User                  @relation(fields: [userId], references: [id])

  name         String
  dosage       String
  form         MedicationForm        @default(PILL)
  timesPerDay  Int
  times        String[]

  startDate    DateTime
  notes        String?
  status       MedicationStatus      @default(ACTIVE)
  instruction  MedicationInstruction @default(NONE)

  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  role      UserRole   @default(PATIENT)
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isDeleted Boolean  @default(false)
  appointments Appointment[]
  doctor     Doctor?
   medications Medication[]
}

model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String            @db.ObjectId
  user      User              @relation(fields: [userId], references: [id])
  doctorId  String?           @db.ObjectId
  doctor    Doctor?           @relation(fields: [doctorId], references: [id])
  date      DateTime
  time      String
  type      AppointmentType
  status    AppointmentStatus @default(BOOKED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Doctor {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @unique @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  specialty    String
  location     String
  phone        String
  bio          String?
  experience   Int?
  appointments Appointment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}



